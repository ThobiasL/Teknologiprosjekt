digraph "classes_Teknologiprosjekt" {
rankdir=BT
charset="utf-8"
"Teknologiprosjekt.core.entities.Alarm" [color="black", fontcolor="black", label=<{Alarm|hours : str<br ALIGN="LEFT"/>minutes : str<br ALIGN="LEFT"/>mode : int<br ALIGN="LEFT"/>state : str<br ALIGN="LEFT"/>timer : int<br ALIGN="LEFT"/>turned_on : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.headunit.arduino_adapter.ArduinoAdapter" [color="black", fontcolor="black", label=<{ArduinoAdapter|arduino<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>read_signal(): str<br ALIGN="LEFT"/>send_signal(message: str, position: int, flag: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.ports.arduino_port.ArduinoPort" [color="black", fontcolor="black", label=<{ArduinoPort|<br ALIGN="LEFT"/>|<I>read_signal</I>(): str<br ALIGN="LEFT"/><I>send_signal</I>(message: str, position: int, flag: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.headunit.headunit_arduino.ArduinoSerial" [color="black", fontcolor="black", label=<{ArduinoSerial|ser : Serial<br ALIGN="LEFT"/>write_delay : float<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>read_signal()<br ALIGN="LEFT"/>send_signal(text, column, row)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.core.autodoorlock_core.AutoDoorLock" [color="black", fontcolor="black", label=<{AutoDoorLock|id<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.flask.autodoorlock_flask.AutoDoorLock" [color="black", fontcolor="black", label=<{AutoDoorLock|id<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.flask.base_flask.Base" [color="black", fontcolor="black", label=<{Base|<br ALIGN="LEFT"/>|get(attribute)<br ALIGN="LEFT"/>get_by_id(model, id)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>set(attribute, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.core.base_core.BaseMixin" [color="black", fontcolor="black", label=<{BaseMixin|<br ALIGN="LEFT"/>|get(attribute)<br ALIGN="LEFT"/>get_by_id(session, id)<br ALIGN="LEFT"/>save(session)<br ALIGN="LEFT"/>set(session, attribute, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.application.config.Config" [color="black", fontcolor="black", label=<{Config|JSON_AS_ASCII : bool<br ALIGN="LEFT"/>SECRET_KEY : NoneType<br ALIGN="LEFT"/>SQLALCHEMY_DATABASE_URI<br ALIGN="LEFT"/>SQLALCHEMY_TRACK_MODIFICATIONS : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.headunit.database_adapter.DatabaseAdapter" [color="black", fontcolor="black", label=<{DatabaseAdapter|db<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_session_factory()<br ALIGN="LEFT"/>read_auto_door_lock_time(): str<br ALIGN="LEFT"/>read_medication_doses(day: str): dict<br ALIGN="LEFT"/>read_tasks(): list<br ALIGN="LEFT"/>read_variable_status()<br ALIGN="LEFT"/>send_auto_door_lock_time(status: int)<br ALIGN="LEFT"/>send_medication_dose_status(medication_id: int, dose_id: int)<br ALIGN="LEFT"/>task_done(task_name: str, task_time: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.ports.database_port.DatabasePort" [color="black", fontcolor="black", label=<{DatabasePort|<br ALIGN="LEFT"/>|<I>read_auto_door_lock_time</I>(): str<br ALIGN="LEFT"/><I>read_medication_doses</I>(day: str): Dict[str, bool]<br ALIGN="LEFT"/><I>read_tasks</I>(): List[Dict]<br ALIGN="LEFT"/><I>read_variable_status</I>()<br ALIGN="LEFT"/><I>send_auto_door_lock_time</I>(status: int)<br ALIGN="LEFT"/><I>send_medication_dose_status</I>(medication_id: int, dose_id: int)<br ALIGN="LEFT"/><I>task_done</I>(task_name: str, task_time: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.core.models.datetime_model.DateTimeModel" [color="black", fontcolor="black", label=<{DateTimeModel|<br ALIGN="LEFT"/>|get_datetime(): str<br ALIGN="LEFT"/>get_time(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.services.headunit.Headunit" [color="black", fontcolor="black", label=<{Headunit|db_session<br ALIGN="LEFT"/>|readAutoDoorLockTimeFromDatabase()<br ALIGN="LEFT"/>readMedicationDosesFromDatabase(day: str)<br ALIGN="LEFT"/>readTasksFromDatabase()<br ALIGN="LEFT"/>readVariableStatusFromDatabase()<br ALIGN="LEFT"/>readVisteStatusFromDatabase()<br ALIGN="LEFT"/>sendAutoDoorLockTimeToDatabase(status: int)<br ALIGN="LEFT"/>sendMedicationDosesStatusToDatabase(medication_id: int, dose_id: int)<br ALIGN="LEFT"/>sendVisteStatusToDatabase(status: bool)<br ALIGN="LEFT"/>taskDone(name: str, time: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.core.services.HeadunitService" [color="black", fontcolor="black", label=<{HeadunitService|alarm<br ALIGN="LEFT"/>alarm_time : int<br ALIGN="LEFT"/>arduino<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>edit_alarm : int<br ALIGN="LEFT"/>edit_alarm_mode : int<br ALIGN="LEFT"/>prev_alarm_mode : int<br ALIGN="LEFT"/>prev_visit_mode : int<br ALIGN="LEFT"/>sound_player<br ALIGN="LEFT"/>visit_mode : int<br ALIGN="LEFT"/>wireless_comm<br ALIGN="LEFT"/>|handle_door_lock_update(status: bool)<br ALIGN="LEFT"/>update_alarm(signal: int)<br ALIGN="LEFT"/>volume_control(signal: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.core.medication_core.Medication" [color="black", fontcolor="black", label=<{Medication|day<br ALIGN="LEFT"/>dose_1<br ALIGN="LEFT"/>dose_2<br ALIGN="LEFT"/>dose_3<br ALIGN="LEFT"/>dose_4<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>scheduled_1<br ALIGN="LEFT"/>scheduled_2<br ALIGN="LEFT"/>scheduled_3<br ALIGN="LEFT"/>scheduled_4<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.flask.medication_flask.Medication" [color="black", fontcolor="black", label=<{Medication|day<br ALIGN="LEFT"/>dose_1<br ALIGN="LEFT"/>dose_2<br ALIGN="LEFT"/>dose_3<br ALIGN="LEFT"/>dose_4<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>scheduled_1<br ALIGN="LEFT"/>scheduled_2<br ALIGN="LEFT"/>scheduled_3<br ALIGN="LEFT"/>scheduled_4<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.services.periodic_reader.PeriodicDatabaseReader" [color="black", fontcolor="black", label=<{PeriodicDatabaseReader|db_session_factory : sessionmaker<br ALIGN="LEFT"/>interval : float<br ALIGN="LEFT"/>last_door_lock_status : NoneType<br ALIGN="LEFT"/>on_door_lock_update : NoneType<br ALIGN="LEFT"/>stop_event : Event<br ALIGN="LEFT"/>thread : Thread<br ALIGN="LEFT"/>|check_door_lock_status()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.headunit.sound_player.SoundPlayer" [color="black", fontcolor="black", label=<{SoundPlayer|alarm_channel : NoneType<br ALIGN="LEFT"/>alarm_sound : NoneType<br ALIGN="LEFT"/>audio_dir<br ALIGN="LEFT"/>current_sound : NoneType<br ALIGN="LEFT"/>eat_dinner_channel : NoneType<br ALIGN="LEFT"/>eat_dinner_sound : NoneType<br ALIGN="LEFT"/>go_for_a_walk_channel : NoneType<br ALIGN="LEFT"/>go_for_a_walk_sound : NoneType<br ALIGN="LEFT"/>is_playing : bool<br ALIGN="LEFT"/>last_time_rec : float, int<br ALIGN="LEFT"/>paused_position : float, int<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>|get_playing_position()<br ALIGN="LEFT"/>pause_sound()<br ALIGN="LEFT"/>play_alarm()<br ALIGN="LEFT"/>play_eat_dinner()<br ALIGN="LEFT"/>play_go_for_a_walk()<br ALIGN="LEFT"/>play_sound(sound_file, start)<br ALIGN="LEFT"/>set_volume(volume)<br ALIGN="LEFT"/>sound_is_not_playing()<br ALIGN="LEFT"/>stop_alarm()<br ALIGN="LEFT"/>stop_eat_dinner()<br ALIGN="LEFT"/>stop_go_for_a_walk()<br ALIGN="LEFT"/>stop_sound()<br ALIGN="LEFT"/>unpause_sound()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.headunit.sound_player_adapter.SoundPlayerAdapter" [color="black", fontcolor="black", label=<{SoundPlayerAdapter|player<br ALIGN="LEFT"/>task_playing : bool<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>pause_sound()<br ALIGN="LEFT"/>play_alarm()<br ALIGN="LEFT"/>play_sound(sound_name: str)<br ALIGN="LEFT"/>set_volume(volume: float)<br ALIGN="LEFT"/>stop_alarm()<br ALIGN="LEFT"/>unpause_sound()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.ports.sound_player_port.SoundPlayerPort" [color="black", fontcolor="black", label=<{SoundPlayerPort|<br ALIGN="LEFT"/>|<I>pause_sound</I>()<br ALIGN="LEFT"/><I>play_alarm</I>()<br ALIGN="LEFT"/><I>play_sound</I>(sound_name: str)<br ALIGN="LEFT"/><I>set_volume</I>(volume: float)<br ALIGN="LEFT"/><I>stop_alarm</I>()<br ALIGN="LEFT"/><I>unpause_sound</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.core.task_core.Task" [color="black", fontcolor="black", label=<{Task|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>scheduled<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.flask.task_flask.Task" [color="black", fontcolor="black", label=<{Task|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>scheduled<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.application.config.TestConfig" [color="black", fontcolor="black", label=<{TestConfig|SQLALCHEMY_DATABASE_URI : str<br ALIGN="LEFT"/>SQLALCHEMY_TRACK_MODIFICATIONS : bool<br ALIGN="LEFT"/>TESTING : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.core.user_core.User" [color="black", fontcolor="black", label=<{User|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>password_hash<br ALIGN="LEFT"/>|check_password(password)<br ALIGN="LEFT"/>set_password(password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.flask.user_flask.User" [color="black", fontcolor="black", label=<{User|id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>password_hash<br ALIGN="LEFT"/>|check_password(password)<br ALIGN="LEFT"/>set_password(password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.headunit.wireless_communication_adapter.WirelessCommunicationAdapter" [color="black", fontcolor="black", label=<{WirelessCommunicationAdapter|wireless<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_message(): str<br ALIGN="LEFT"/>lock_door()<br ALIGN="LEFT"/>pill_dispensation()<br ALIGN="LEFT"/>unlock_door()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.ports.wireless_communication_port.WirelessCommunicationPort" [color="black", fontcolor="black", label=<{WirelessCommunicationPort|<br ALIGN="LEFT"/>|<I>get_message</I>(): str<br ALIGN="LEFT"/><I>lock_door</I>()<br ALIGN="LEFT"/><I>pill_dispensation</I>()<br ALIGN="LEFT"/><I>unlock_door</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.headunit.headunit_wireless_communication.Wireless_communication" [color="black", fontcolor="black", label=<{Wireless_communication|accepted_signals : tuple<br ALIGN="LEFT"/>buffer_size : int<br ALIGN="LEFT"/>esp32_ip : str<br ALIGN="LEFT"/>esp32_port : int<br ALIGN="LEFT"/>last_received_message : NoneType<br ALIGN="LEFT"/>listen_port : int<br ALIGN="LEFT"/>listener_thread : Thread<br ALIGN="LEFT"/>listening : bool<br ALIGN="LEFT"/>lock : lock<br ALIGN="LEFT"/>max_retries : int<br ALIGN="LEFT"/>recv_socket : socket<br ALIGN="LEFT"/>send_socket : socket<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>|close_sockets()<br ALIGN="LEFT"/>getMessage()<br ALIGN="LEFT"/>lockDoor()<br ALIGN="LEFT"/>pillDispensation()<br ALIGN="LEFT"/>readSignalFromESP32()<br ALIGN="LEFT"/>sendSignalToESP32(esp32_ip, message, esp32_port)<br ALIGN="LEFT"/>unlockDoor()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Teknologiprosjekt.adapters.database.core.medication_core.Medication" -> "Teknologiprosjekt.adapters.database.core.base_core.BaseMixin" [arrowhead="empty", arrowtail="none"];
"Teknologiprosjekt.adapters.database.core.task_core.Task" -> "Teknologiprosjekt.adapters.database.core.base_core.BaseMixin" [arrowhead="empty", arrowtail="none"];
"Teknologiprosjekt.adapters.database.core.user_core.User" -> "Teknologiprosjekt.adapters.database.core.base_core.BaseMixin" [arrowhead="empty", arrowtail="none"];
"Teknologiprosjekt.adapters.database.flask.autodoorlock_flask.AutoDoorLock" -> "Teknologiprosjekt.adapters.database.flask.base_flask.Base" [arrowhead="empty", arrowtail="none"];
"Teknologiprosjekt.adapters.database.flask.medication_flask.Medication" -> "Teknologiprosjekt.adapters.database.flask.base_flask.Base" [arrowhead="empty", arrowtail="none"];
"Teknologiprosjekt.adapters.database.flask.task_flask.Task" -> "Teknologiprosjekt.adapters.database.flask.base_flask.Base" [arrowhead="empty", arrowtail="none"];
"Teknologiprosjekt.adapters.database.flask.user_flask.User" -> "Teknologiprosjekt.adapters.database.flask.base_flask.Base" [arrowhead="empty", arrowtail="none"];
"Teknologiprosjekt.application.config.TestConfig" -> "Teknologiprosjekt.application.config.Config" [arrowhead="empty", arrowtail="none"];
}
